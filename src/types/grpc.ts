/*
 * Copyright (c) 2023-2024 - Restate Software, Inc., Restate GmbH
 *
 * This file is part of the Restate SDK for Node.js/TypeScript,
 * which is released under the MIT license.
 *
 * You can find a copy of the license in file LICENSE in the root
 * directory of this repository or package, or at
 * https://github.com/restatedev/sdk-typescript/blob/main/LICENSE
 */

import { Context } from "../context";
import { FileDescriptorProto } from "ts-proto-descriptors";

export class GrpcServiceMethod<I, O> {
  constructor(
    readonly name: string, // the gRPC name as defined in the .proto file
    readonly localName: string, // the method name as defined in the class.
    readonly keyedContext: boolean, // If the method expects a keyed context
    readonly localFn: (instance: unknown, input: I) => Promise<O>, // the actual function
    readonly inputDecoder: (buf: Uint8Array) => I, // the protobuf decoder
    readonly outputEncoder: (output: O) => Uint8Array // protobuf encoder
  ) {}
}

export class GrpcService {
  constructor(
    readonly name: string,
    readonly packge: string,
    readonly impl: object,
    readonly methods: Array<GrpcServiceMethod<unknown, unknown>>
  ) {}
}

export class HostedGrpcServiceMethod<I, O> {
  constructor(
    readonly instance: unknown,
    readonly pkg: string,
    readonly service: string,
    readonly method: GrpcServiceMethod<I, O>
  ) {}

  // The end of an invoke is either a response (Uint8Array) or a SuspensionMessage
  async invoke(context: Context, inBytes: Uint8Array): Promise<Uint8Array> {
    const instanceWithContext = setContext(this.instance, context);
    const input = this.method.inputDecoder(inBytes);
    const result: O = await this.method.localFn(instanceWithContext, input);
    return this.method.outputEncoder(result);
  }
}

function setContext<T>(instance: T, context: Context): T {
  // creates a *new*, per call object that shares all the properties that @instance has
  // except '$$restate' which is a unique, per call pointer to a restate context.
  //
  // The following line create a new object, that its prototype is @instance.
  // and that object has a $$restate property.
  const wrapper = Object.create(instance as object, {
    $$restate: { value: context },
  });
  return wrapper as T;
}

//
// The following definitions are equivalent to the ones
// generated by the protoc ts plugin.
// we use them to traverse the FileDescriptor
//
/* eslint-disable @typescript-eslint/no-explicit-any */
type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: {
        options?: { [key: string]: any };
        methods?: { [key: string]: { [key: string]: any } };
      };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: {
      [key: string]: {
        options?: { [key: string]: any };
        values?: { [key: string]: { [key: string]: any } };
      };
    };
  };
}
