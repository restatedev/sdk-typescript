name: Test Lambda Template (LocalStack with CDK)

on:
  workflow_call:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      restate:
        image: docker.restate.dev/restatedev/restate:latest
        ports:
          - 8080:8080
          - 9070:9070
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          AWS_ENDPOINT_URL: http://localstack:4566
        options: >-
          --health-cmd "curl -f http://localhost:9070/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: lambda,iam,sts,logs
          DEBUG: 1
          LAMBDA_EXECUTOR: local
          DOCKER_HOST: unix:///var/run/docker.sock
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_REGION: us-east-1

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install AWS CLI Local
        run: |
          pip install awscli-local[ver1]

      - name: Wait for LocalStack
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'
          echo "LocalStack is ready!"

      - name: Install dependencies
        run: npm install

      - name: Build packages
        run: npm run build

      - name: Build Lambda code
        working-directory: templates/lambda
        run: npm run build

      - name: Create Lambda deployment package
        working-directory: templates/lambda
        run: npm run bundle

      - name: Create IAM roles in LocalStack
        run: |
          # Execution role (for Lambda to run)
          awslocal iam create-role \
            --role-name lambda-execution-role \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "lambda.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }'

          # Invoker role (for Restate to assume)
          awslocal iam create-role \
            --role-name lambda-invoker-role \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"AWS": "arn:aws:iam::000000000000:root"},
                "Action": "sts:AssumeRole"
              }]
            }'

          # Add invoke policy to invoker role
          awslocal iam put-role-policy \
            --role-name lambda-invoker-role \
            --policy-name InvokeLambdaPolicy \
            --policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": "lambda:InvokeFunction",
                "Resource": "*"
              }]
            }'

      - name: Deploy Lambda to LocalStack
        working-directory: templates/lambda
        run: |
          FUNCTION_ARN=$(awslocal lambda create-function \
            --function-name restate-greeter \
            --runtime nodejs22.x \
            --handler index.handler \
            --role arn:aws:iam::000000000000:role/lambda-execution-role \
            --zip-file fileb://lambda.zip \
            --timeout 30 \
            --memory-size 256 \
            --query 'FunctionArn' \
            --output text)

          echo "Function ARN: $FUNCTION_ARN"
          echo "FUNCTION_ARN=$FUNCTION_ARN" >> $GITHUB_ENV
      - name: Publish Lambda version
        run: |
          VERSION_ARN=$(awslocal lambda publish-version \
            --function-name restate-greeter \
            --query 'FunctionArn' \
            --output text)

          echo "Version ARN: $VERSION_ARN"
          echo "VERSION_ARN=$VERSION_ARN" >> $GITHUB_ENV

      - name: Grant invoke permissions
        run: |
          # Grant on function
          awslocal lambda add-permission \
            --function-name restate-greeter \
            --statement-id AllowInvokerRole \
            --action lambda:InvokeFunction \
            --principal arn:aws:iam::000000000000:role/lambda-invoker-role

          # Grant on version
          awslocal lambda add-permission \
            --function-name restate-greeter:1 \
            --statement-id AllowInvokerRoleVersion \
            --action lambda:InvokeFunction \
            --principal arn:aws:iam::000000000000:role/lambda-invoker-role

      - name: Wait for Lambda to be ready
        run: sleep 5

      - name: Register Lambda with Restate
        run: |
          curl -X POST http://localhost:9070/deployments \
            -H 'content-type: application/json' \
            -d "{
              \"arn\": \"${{ env.VERSION_ARN }}\",
              \"assume_role_arn\": \"arn:aws:iam::000000000000:role/lambda-invoker-role\"
            }"

      - name: Wait for registration
        run: sleep 5

      - name: Test Lambda template
        run: |
          echo "Testing Greeter service..."
          RESPONSE=$(curl -s localhost:8080/Greeter/greet --json '{"name": "Lambda-LocalStack"}')
          echo "Response: $RESPONSE"

          if echo "$RESPONSE" | grep -q "You said hi to Lambda-LocalStack!"; then
            echo "✅ Test passed!"
          else
            echo "❌ Test failed! Expected: { result: You said hi to Lambda-LocalStack! }"
            exit 1
          fi

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Restate logs ==="
          docker logs $(docker ps -q --filter ancestor=docker.restate.dev/restatedev/restate:latest)

          echo "=== LocalStack logs ==="
          docker logs $(docker ps -q --filter ancestor=localstack/localstack:latest)

          echo "=== Lambda logs ==="
          awslocal logs tail /aws/lambda/restate-greeter --since 30m || true
