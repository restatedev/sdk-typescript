name: Test Lambda Template (LocalStack with CDK)

on:
  workflow_call:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      restate:
        image: docker.restate.dev/restatedev/restate:latest
        ports:
          - 8080:8080
          - 9070:9070
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          AWS_ENDPOINT_URL: http://localstack:4566
        options: >-
          --health-cmd "curl -f http://localhost:9070/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: lambda,iam,sts,logs,cloudformation,s3
          DEBUG: 1
          LAMBDA_EXECUTOR: local
          DOCKER_HOST: unix:///var/run/docker.sock
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

    env:
      AWS_ENDPOINT_URL: http://localhost:4566
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_REGION: us-east-1
      CDK_DEFAULT_ACCOUNT: "000000000000"
      CDK_DEFAULT_REGION: us-east-1
      STACK_NAME: restate-lambda-test-${{ github.run_id }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install AWS CLI Local
        run: |
          pip install awscli-local[ver1]

      - name: Wait for LocalStack
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'
          echo "LocalStack is ready!"

      - name: Install dependencies
        run: npm install

      - name: Build packages
        run: npm run build

      - name: Bootstrap CDK for LocalStack
        working-directory: templates/lambda
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
        run: |
          npx cdk bootstrap aws://000000000000/us-east-1 || true

      - name: Deploy CDK stack to LocalStack
        working-directory: templates/lambda
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
        run: |
          npx cdk deploy \
            --require-approval never \
            --outputs-file outputs.json \
            --context stackName=${{ env.STACK_NAME }}

      - name: Get Lambda ARNs and Invoker Role from CDK outputs
        working-directory: templates/lambda
        run: |
          FUNCTION_VERSION_ARN=$(jq -r '.["${{ env.STACK_NAME }}"].FunctionVersionArn' outputs.json)
          INVOKER_ROLE_ARN=$(jq -r '.["${{ env.STACK_NAME }}"].InvokerRoleArn' outputs.json)

          echo "Lambda Version ARN: $FUNCTION_VERSION_ARN"
          echo "Invoker Role ARN: $INVOKER_ROLE_ARN"

          echo "LAMBDA_VERSION_ARN=$FUNCTION_VERSION_ARN" >> $GITHUB_ENV
          echo "INVOKER_ROLE_ARN=$INVOKER_ROLE_ARN" >> $GITHUB_ENV

      - name: Wait for Lambda to be ready in LocalStack
        run: sleep 5

      - name: Register Lambda with Restate
        run: |
          curl -X POST http://localhost:9070/deployments \
            -H 'content-type: application/json' \
            -d "{
              \"arn\": \"${{ env.LAMBDA_VERSION_ARN }}\",
              \"assume_role_arn\": \"${{ env.INVOKER_ROLE_ARN }}\"
            }"

      - name: Wait for registration
        run: sleep 5

      - name: Test Lambda template
        run: |
          echo "Testing Greeter service..."
          RESPONSE=$(curl -s localhost:8080/Greeter/greet --json '{"name": "Lambda-LocalStack"}')
          echo "Response: $RESPONSE"

          # Check if response contains expected message
          if echo "$RESPONSE" | grep -q "You said hi to Lambda-LocalStack!"; then
            echo "✅ Test passed!"
          else
            echo "❌ Test failed! Expected: { result: You said hi to Lambda-LocalStack! }"
            exit 1
          fi

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Restate logs ==="
          docker logs $(docker ps -q --filter ancestor=docker.restate.dev/restatedev/restate:latest)

          echo "=== LocalStack logs ==="
          docker logs $(docker ps -q --filter ancestor=localstack/localstack:latest)

          echo "=== CDK outputs ==="
          cat templates/lambda/outputs.json || true

          echo "=== Lambda logs ==="
          awslocal logs tail /aws/lambda/$(echo ${{ env.FUNCTION_ARN }} | rev | cut -d: -f1 | rev) --since 30m || true

      - name: Destroy CDK stack
        if: always()
        working-directory: templates/lambda
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
        run: |
          npx cdk destroy \
            --force \
            --context stackName=${{ env.STACK_NAME }} || true
