/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ProtocolMode = "BIDI_STREAM" | "REQUEST_RESPONSE";
export type ServiceType = "VIRTUAL_OBJECT" | "SERVICE" | "WORKFLOW";
/**
 * If unspecified, defaults to EXCLUSIVE for Virtual Object or WORKFLOW for Workflows. This should be unset for Services.
 */
export type HandlerType = "WORKFLOW" | "EXCLUSIVE" | "SHARED";

/**
 * Restate endpoint manifest v3
 */
export interface Endpoint {
  protocolMode?: ProtocolMode;
  /**
   * Minimum supported protocol version
   */
  minProtocolVersion: number;
  /**
   * Maximum supported protocol version
   */
  maxProtocolVersion: number;
  services: Service[];
}
export interface Service {
  name: string;
  /**
   * Documentation for this service definition. No format is enforced, but generally Markdown is assumed.
   */
  documentation?: string;
  ty: ServiceType;
  handlers: Handler[];
  /**
   * Inactivity timeout duration, expressed in milliseconds.
   */
  inactivityTimeout?: number;
  /**
   * Abort timeout duration, expressed in milliseconds.
   */
  abortTimeout?: number;
  /**
   * Journal retention duration, expressed in milliseconds.
   */
  journalRetention?: number;
  /**
   * Idempotency retention duration, expressed in milliseconds. When ServiceType == WORKFLOW, this option will be applied only to the shared handlers. See workflowCompletionRetention for more details.
   */
  idempotencyRetention?: number;
  /**
   * If true, lazy state is enabled.
   */
  enableLazyState?: boolean;
  /**
   * If true, the service cannot be invoked from the HTTP nor Kafka ingress.
   */
  ingressPrivate?: boolean;
  /**
   * Custom metadata of this service definition. This metadata is shown on the Admin API when querying the service definition.
   */
  metadata?: {
    [k: string]: string;
  };
}
export interface Handler {
  name: string;
  /**
   * Documentation for this handler definition. No format is enforced, but generally Markdown is assumed.
   */
  documentation?: string;
  ty?: HandlerType;
  input?: InputPayload;
  output?: OutputPayload;
  /**
   * Inactivity timeout duration, expressed in milliseconds.
   */
  inactivityTimeout?: number;
  /**
   * Abort timeout duration, expressed in milliseconds.
   */
  abortTimeout?: number;
  /**
   * Journal retention duration, expressed in milliseconds.
   */
  journalRetention?: number;
  /**
   * Idempotency retention duration, expressed in milliseconds. This is NOT VALID when HandlerType == WORKFLOW
   */
  idempotencyRetention?: number;
  /**
   * Workflow completion retention duration, expressed in milliseconds. This is valid ONLY when HandlerType == WORKFLOW
   */
  workflowCompletionRetention?: number;
  /**
   * If true, lazy state is enabled.
   */
  enableLazyState?: boolean;
  /**
   * If true, the service cannot be invoked from the HTTP nor Kafka ingress.
   */
  ingressPrivate?: boolean;
  /**
   * Custom metadata of this handler definition. This metadata is shown on the Admin API when querying the service/handler definition.
   */
  metadata?: {
    [k: string]: string;
  };
}
/**
 * Description of an input payload. This will be used by Restate to validate incoming requests.
 */
export interface InputPayload {
  /**
   * If true, a body MUST be sent with a content-type, even if the body length is zero.
   */
  required?: boolean;
  /**
   * Content type of the input. It can accept wildcards, in the same format as the 'Accept' header. When this field is unset, it implies emptiness, meaning no content-type/body is expected.
   */
  contentType?: string;
  jsonSchema?: unknown;
}
/**
 * Description of an output payload.
 */
export interface OutputPayload {
  /**
   * Content type set on output. This will be used by Restate to set the output content type at the ingress.
   */
  contentType?: string;
  /**
   * If true, the specified content-type is set even if the output is empty.
   */
  setContentTypeIfEmpty?: boolean;
  jsonSchema?: unknown;
}
